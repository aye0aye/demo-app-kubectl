jobs:
# jobs for the provision-gke-kubernetes-cluster app

  - name: build_frontend_image
    type: runSh
    steps:
      - IN: vote_app_redis_gitRepo
        switch: off
      - IN: gke_cliConfig
        switch: off
      - TASK:
        # build the ship-vote image and push it to GCR
        - script: |
            pushd $VOTE_APP_REDIS_GITREPO_STATE/ship-vote
              export IMG_TAG=master.$BUILD_NUMBER
              export IMG_REF=$VOTE_FRONT_IMG_SOURCENAME:$IMG_TAG
              docker build -t $IMG_REF .
              gcloud docker -- push $IMG_REF
              shipctl put_resource_state vote_front_img "versionName" "$IMG_TAG"
            popd
      - OUT: vote_front_img

  - name: deploy_test
    type: runSh
    steps:
      - IN: vote_app_redis_gitRepo
        switch: off
      - IN: vote_front_img
      - IN: gke_cliConfig
        switch: off
      - IN: test_params
        switch: off
      - IN: gke_cluster
        switch: off
      - OUT: relstate
      - OUT: teststate
      - TASK:
        # Create a Kubernetes deploy spec and service for the test environment for an existing cluster and deploy them
        - script: |
            pushd $VOTE_APP_REDIS_GITREPO_STATE/kubernetes-manifests
              export FE_TAG=$VOTE_FRONT_IMG_VERSIONNAME
              cp ./ship_vote_all_in_one_redis.yml.template ./release.template.yml
              shipctl post_resource_state "relstate" "FE_TAG" $FE_TAG
              shipctl refresh_file_to_out_path ./release.template.yml relstate

              cp ./ship_vote_all_in_one_redis.yml.template ./test_deploy_spec.yml
              shipctl replace ./test_deploy_spec.yml
              shipctl refresh_file_to_out_path ./test_deploy_spec.yml teststate

              gcloud container clusters get-credentials $GKE_CLUSTER_POINTER_SOURCENAME --zone $GKE_CLUSTER_POINTER_REGION
              # delete previous deployments and services
              kubectl delete deployment $FE_LABEL 2>/dev/null || echo ""
              kubectl delete deployment $BE_LABEL 2>/dev/null || echo ""
              kubectl delete service $FE_LABEL 2>/dev/null || echo ""
              kubectl delete service $BE_LABEL 2>/dev/null || echo ""

              kubectl create -o json -f ./test_deploy_spec.yml > kube_output.json
              cat kube_output.json
            popd

  - name: deploy_prod
    type: runSh
    steps:
      - IN: deploy_test
        switch: off
      - IN: gke_cliConfig
        switch: off
      - IN: relstate
        switch: off
      - IN: prod_params
        switch: off
      - IN: gke_cluster
        switch: off
      - OUT: prodstate
      - TASK:
        # Create a Kubernetes deploy spec and service for the Prod environment for an existing cluster and deploy them
        - script: |
            shipctl copy_resource_file_from_state relstate release.template.yml .
            cp ./release.template.yml ./prod_deploy_spec.yml
            export FE_TAG=$(eval echo "$"$(shipctl get_resource_version_key "relstate" "FE_TAG"))
            shipctl replace ./prod_deploy_spec.yml
            shipctl refresh_file_to_out_path ./prod_deploy_spec.yml prodstate

            gcloud container clusters get-credentials $GKE_CLUSTER_POINTER_SOURCENAME --zone $GKE_CLUSTER_POINTER_REGION
            # delete previous deployments and services
            kubectl delete deployment $FE_LABEL 2>/dev/null || echo ""
            kubectl delete deployment $BE_LABEL 2>/dev/null || echo ""
            kubectl delete service $FE_LABEL 2>/dev/null || echo ""
            kubectl delete service $BE_LABEL 2>/dev/null || echo ""

            kubectl create -o json -f ./prod_deploy_spec.yml > kube_output.json
            cat kube_output.json
